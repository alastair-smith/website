version: 2.1

# ++++++++++++++++++++++++++++++ 🐣 Base Images 🐣 ++++++++++++++++++++++++++++++

.alpine-image: &alpine-image
  docker:
    - image: alpine:latest@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300

.node-image: &node-image
  docker:
    - image: node:14.18.1-alpine@sha256:240e1e6ef6dfba3bb70d6e88cca6cbb0b5a6f3a2b4496ed7edc5474e8ed594bd

.terraform-image: &terraform-image
  docker:
    - image: hashicorp/terraform:1.1.7@sha256:ef828667eca97a3ad9b8f26918b68170bcb3066cd9ba9540da73a608c6b4a2bb

.tflint-image: &tflint-image
  docker:
    - image: ghcr.io/terraform-linters/tflint-bundle:v0.35.0.0@sha256:9dd720df78a2dd55fac9d7d85ec79ec5f16ebe50ceb94aa97e5d3cc34c69f693

.amazon-linux-image: &amazon-linux-image
  docker:
    - image: amazonlinux:latest@sha256:f3a37f84f2644095e2c6f6fdf2bf4dbf68d5436c51afcfbfa747a5de391d5d62

# ++++++++++++++++++++++++++ ♻️ Reusable Commands ♻️ ++++++++++++++++++++++++++

commands:
  install-node-modules:
    parameters:
      working_directory:
        type: string
    steps:
      - run:
          name: Install git
          working_directory: << parameters.working_directory >>
          command: apk add --no-cache git
      - run:
          name: Install node modules
          working_directory: << parameters.working_directory >>
          command: npm ci

# +++++++++++++++++++++++++++++++++ 💼 Jobs 💼 ++++++++++++++++++++++++++++++++++

jobs:
  # ++++++++++++++++++++++++++++++ ✅ Validate ✅ +++++++++++++++++++++++++++++

  audit node modules:
    <<: *node-image
    parameters:
      working_directory:
        type: string
    steps:
      - checkout
      - run:
          name: Check for threats in all dependencies
          working_directory: << parameters.working_directory >>
          command: npm audit || echo "allowing failure"
      - run:
          name: Check for all threats in production dependencies
          working_directory: << parameters.working_directory >>
          command: npm audit --production

  lint javascript:
    <<: *node-image
    parameters:
      working_directory:
        type: string
    steps:
      - checkout
      - install-node-modules:
          working_directory: << parameters.working_directory >>
      - run:
          name: linter
          working_directory: <<parameters.working_directory >>
          command: npm run linter

  spellcheck markdown files:
    <<: *node-image
    steps:
      - checkout
      - run:
          # TODO add to package.json
          name: install spellchecker
          command: npm i -g markdown-spellcheck
      - run: # TODO generate, store report, add to PR?
          name: spellcheck
          command: mdspell '**/*.md' '!**/node_modules/**/*.md' -n -x --en-gb -r || echo "ignoring failure"

  validate terraform:
    <<: *terraform-image
    steps:
      - checkout
      - run:
          name: terraform init
          working_directory: infrastructure
          command: terraform init -backend=false
      - run:
          name: terraform validate
          working_directory: infrastructure
          command: terraform validate
  check terraform formatting:
    <<: *terraform-image
    steps:
      - checkout
      - run:
          name: terrform format
          working_directory: infrastructure
          command: terraform fmt -check -recursive
  lint terraform:
    <<: *tflint-image
    steps:
      - checkout
      - run:
          name: tflint init
          working_directory: infrastructure
          command: tflint --init
      - run:
          name: tflint
          working_directory: infrastructure
          command: tflint
  lint terraform compliance features:
    <<: *node-image
    steps:
      - checkout
      - run: # todo add to package.json
          name: install gherkin lint
          command: npm i -g gherkin-lint
      - run:
          name: gherkin lint
          working_directory: infrastructure/test/compliance
          command: gherkin-lint

  # +++++++++++++++++++++++++++++++ 👷 Build 👷 +++++++++++++++++++++++++++++++

  build app:
    <<: *node-image
    steps:
      - checkout
      - install-node-modules:
          working_directory: app
      - run:
          name: build app
          working_directory: app
          command: npm run build
      - store_artifacts:
          path: app/build
          destination: build/app/build
  build kelly lambda function:
    <<: *alpine-image
    steps:
      - checkout
      - run:
          name: install zip
          command: apk add --no-cache zip
      - run:
          name: zip function code
          working_directory: app/kelly
          command: cat .zipignore | tr '\r\n' ' ' | xargs zip -r function.zip . -x
      - store_artifacts:
          path: app/kelly/function.zip
          destination: build/kelly-function.zip
  build kelly lambda layer:
    <<: *amazon-linux-image
    steps:
      - checkout
      - run:
          name: build layer
          working_directory: app/kelly
          command: ./build-layer.sh
      - store_artifacts:
          path: app/kelly/layer.zip
          destination: build/kelly-layer.zip
  build deployment package:
    <<: *alpine-image
    steps:
      - checkout
      - store_artifacts:
          name: store dynamic app
          path: app/dynamic
          destination: build/app/dynamic
      - store_artifacts:
          name: store workers app
          path: app/workers
          destination: build/app/workers
      - store_artifacts:
          name: store infrastructure
          path: infrastructure
          destination: build/infrastructure

  # +++++++++++++++++++++++++++++++ 🚀 Deploy 🚀 ++++++++++++++++++++++++++++++

  deploy:
    <<: *terraform-image
    steps:
      - checkout
      - run:
          name: install packages
          command: apk add --no-cache curl bash jq gettext
      - run:
          name: get artifacts
          command: ./ci/get-build-artifacts.sh
      - run:
          name: construct deployment variables
          command: |
            echo "export branch_slug=$(echo $CIRCLE_BRANCH | tr '[:upper:]' '[:lower:]' | tr '/' '-' | tr '_' '-' | tr '.' '-')" >> "$BASH_ENV"
            echo "export WORKSPACE=$()"
            cd build/infrastructure
            export DYNAMIC_APP_DIRECTORY_PATH=$()
      # - run:
      #     name: terraform init
      # - run:
      #     name: terraform plan
      # - run:
      #     name: terraform compliance
      # - run:
      #     name: terraform apply

# +++++++++++++++++++++++++++++++ 🤝 Workflow 🤝 ++++++++++++++++++++++++++++++++

.validate-jobs: &validate-jobs
  - audit app node modules
  - audit kelly node modules
  - audit kelly integration tests node modules
  - lint app javascript
  - spellcheck markdown files
  - validate terraform
  - check terraform formatting
  - lint terraform
  - lint terraform compliance features

.build-jobs: &build-jobs
  - build app
  - build kelly lambda function
  - build kelly lambda layer
  - build deployment package

workflows:
  ci:
    jobs:
      # ++++++++++++++++++++++++++ ✅ Validate ✅ +++++++++++++++++++++++++

      - audit node modules:
          name: audit app node modules
          working_directory: app
      - audit node modules:
          name: audit kelly node modules
          working_directory: app/kelly
      - audit node modules:
          name: audit kelly integration tests node modules
          working_directory: app/kelly/test/integration
      - lint javascript:
          name: lint app javascript
          working_directory: app
      - spellcheck markdown files
      - validate terraform
      - check terraform formatting
      - lint terraform
      - lint terraform compliance features

      # +++++++++++++++++++++++++++ 👷 Build 👷 +++++++++++++++++++++++++++

      - build app:
          requires: *validate-jobs
      - build kelly lambda function:
          requires: *validate-jobs
      - build kelly lambda layer:
          requires: *validate-jobs
      - build deployment package:
          requires: *validate-jobs

      # +++++++++++++++++++++++++++ 🚀 Deploy 🚀 ++++++++++++++++++++++++++

      - deploy:
          requires: *build-jobs
