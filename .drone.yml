.nodejs: &nodejs
  image: node:14-alpine

.terraform: &terraform
  image: hashicorp/terraform:0.14.9

kind: pipeline
type: docker
name: validate
image_pull_secrets:
  - dockerconfig
steps:
  - name: check node modules
    <<: *nodejs
    commands:
      - cd app
      - npm audit --audit-level="high"
      - npm audit --production

  - name: install node modules
    <<: *nodejs
    commands:
      - cd app
      - npm ci

  - name: lint javascript
    <<: *nodejs
    commands:
      - cd app
      - npm run linter
    depends_on:
      - install node modules

  - name: validate terraform
    <<: *terraform
    commands:
      - cd infrastructure
      - terraform init -backend=false
      - terraform validate

  - name: check terraform formatting
    <<: *terraform
    commands:
      - cd infrastructure
      - terraform fmt -check -recursive

---
.alpine: &alpine
  image: alpine:latest

.awscli: &awscli
  image: amazon/aws-cli:latest

.nodejs: &nodejs
  image: node:14-alpine

.terraform: &terraform
  image: hashicorp/terraform:0.14.9

kind: pipeline
type: docker
name: build
image_pull_secrets:
  - dockerconfig
depends_on:
  - validate
steps:
  - name: install node modules
    <<: *nodejs
    commands:
      - cd app
      - npm ci

  - name: build app
    <<: *nodejs
    commands:
      - cd app
      - npm run build
    depends_on:
      - install node modules

  - name: bundle package
    <<: *alpine
    commands:
      - mkdir -p package/app
      - cp -r infrastructure package/infrastructure
      - cp -r app/build package/app/build
      - cp -r app/workers package/app/workers
      - tar -zcf package.tgz package
    depends_on:
      - build app

  - name: store package
    <<: *awscli
    environment:
      PACKAGE_BUCKET:
        from_secret: PACKAGE_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_DEFAULT_REGION: eu-west-1
    commands:
      - aws s3api put-object --key "$DRONE_REPO_NAME/$DRONE_BUILD_NUMBER.tgz" --body package.tgz --bucket "$PACKAGE_BUCKET" --tagging="Build=$DRONE_BUILD_NUMBER&Commit=$DRONE_COMMIT_SHA&Repository=$DRONE_REPO_LINK&Service=$DRONE_REPO_NAME"
    depends_on:
      - bundle package

---
.alpine: &alpine
  image: alpine:latest

.awscli: &awscli
  image: amazon/aws-cli:latest

.terraform: &terraform
  image: hashicorp/terraform:0.14.9

.deployment-variables: &deployment-variables
  PACKAGE_BUCKET:
    from_secret: PACKAGE_BUCKET
  STATE_BUCKET:
    from_secret: STATE_BUCKET
  AWS_ACCESS_KEY_ID:
    from_secret: AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY:
    from_secret: AWS_SECRET_ACCESS_KEY
  AWS_DEFAULT_REGION: eu-west-1
  CLOUDFLARE_API_TOKEN:
    from_secret: CLOUDFLARE_API_TOKEN
  CLOUDFLARE_ACCOUNT_ID:
    from_secret: CLOUDFLARE_ACCOUNT_ID

kind: pipeline
type: docker
name: deploy
image_pull_secrets:
  - dockerconfig
depends_on:
  - build
clone:
  disable: true
steps:
  - name: get package
    <<: *awscli
    environment:
      <<: *deployment-variables
    commands:
      - aws s3api get-object --key "$DRONE_REPO_NAME/$DRONE_BUILD_NUMBER.tgz" --bucket "$PACKAGE_BUCKET" package.tgz

  - name: extract package
    <<: *alpine
    commands:
      - tar -zxf package.tgz
    depends_on:
      - get package

  - name: construct IAC variables
    <<: *alpine
    commands:
      - apk add --no-cache gettext
      - export branch_slug=$(echo $DRONE_BRANCH | tr '[:upper:]' '[:lower:]' | tr '/' '-' | tr '_' '-')
      - if [ ! -z "$DRONE_DEPLOY_TO" ]; then export WORKSPACE="$DRONE_DEPLOY_TO"; else export WORKSPACE="$branch_slug"; fi
      - echo "$WORKSPACE" > workspace.tmp
      - cd package/infrastructure
      - export APP_DIRECTORY_PATH="$(cd ../app/build && pwd)"
      - export CLOUDFLARE_WORKER_SCRIPTS="$(cd ../app/workers && pwd)"
      - envsubst < terraform.tfvars.tpl > terraform.tfvars
    depends_on:
      - extract package

  - name: terraform init
    <<: *terraform
    environment:
      <<: *deployment-variables
    commands:
      - export WORKSPACE=$(cat workspace.tmp)
      - cd package/infrastructure
      - terraform init -input=false --backend-config="bucket=$STATE_BUCKET"
      - terraform workspace select "$WORKSPACE" || terraform workspace new "$WORKSPACE"
    depends_on:
      - construct IAC variables

  - name: terraform plan
    <<: *terraform
    environment:
      <<: *deployment-variables
    commands:
      - cd package/infrastructure
      - terraform plan -input=false -out=tfplan
    depends_on:
      - terraform init

  - name: terraform apply
    <<: *terraform
    environment:
      <<: *deployment-variables
    commands:
      - apk add --no-cache curl
      - cd package/infrastructure
      - terraform apply -input=false tfplan
    depends_on:
      - terraform plan

---
.alpine: &alpine
  image: alpine:latest

.awscli: &awscli
  image: amazon/aws-cli:latest

.terraform: &terraform
  image: hashicorp/terraform:0.14.9

.deployment-variables: &deployment-variables
  PACKAGE_BUCKET:
    from_secret: PACKAGE_BUCKET
  STATE_BUCKET:
    from_secret: STATE_BUCKET
  AWS_ACCESS_KEY_ID:
    from_secret: AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY:
    from_secret: AWS_SECRET_ACCESS_KEY
  AWS_DEFAULT_REGION: eu-west-1
  CLOUDFLARE_API_TOKEN:
    from_secret: CLOUDFLARE_API_TOKEN
  CLOUDFLARE_ACCOUNT_ID:
    from_secret: CLOUDFLARE_ACCOUNT_ID

kind: pipeline
type: docker
name: destroy
image_pull_secrets:
  - dockerconfig
depends_on:
  - deploy
clone:
  disable: true
steps:
  - name: get package
    <<: *awscli
    environment:
      <<: *deployment-variables
    commands:
      - aws s3api get-object --key "$DRONE_REPO_NAME/$DRONE_BUILD_NUMBER.tgz" --bucket "$PACKAGE_BUCKET" package.tgz

  - name: extract package
    <<: *alpine
    commands:
      - tar -zxf package.tgz
    depends_on:
      - get package

  - name: construct IAC variables
    <<: *alpine
    commands:
      - apk add --no-cache gettext
      - export branch_slug=$(echo $DRONE_BRANCH | tr '[:upper:]' '[:lower:]' | tr '/' '-' | tr '_' '-')
      - if [ ! -z "$DRONE_DEPLOY_TO" ]; then export WORKSPACE="$DRONE_DEPLOY_TO"; else export WORKSPACE="$branch_slug"; fi
      - echo "$WORKSPACE" > workspace.tmp
      - cd package/infrastructure
      - export APP_DIRECTORY_PATH="$(cd ../app/build && pwd)"
      - export CLOUDFLARE_WORKER_SCRIPTS="$(cd ../app/workers && pwd)"
      - envsubst < terraform.tfvars.tpl > terraform.tfvars
    depends_on:
      - extract package

  - name: terraform init
    <<: *terraform
    environment:
      <<: *deployment-variables
    commands:
      - export WORKSPACE=$(cat workspace.tmp)
      - cd package/infrastructure
      - terraform init -input=false --backend-config="bucket=$STATE_BUCKET"
      - terraform workspace select "$WORKSPACE" || terraform workspace new "$WORKSPACE"
    depends_on:
      - construct IAC variables

  - name: terraform destroy plan
    <<: *terraform
    environment:
      <<: *deployment-variables
    commands:
      - cd package/infrastructure
      - terraform plan -input=false -destroy
    depends_on:
      - terraform init

  - name: terraform destroy
    <<: *terraform
    environment:
      <<: *deployment-variables
    commands:
      - apk add --no-cache curl
      - cd package/infrastructure
      - terraform destroy -input=false -auto-approve
    depends_on:
      - terraform destroy plan
