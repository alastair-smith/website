.nodejs: &nodejs
  image: node:14-alpine

.terraform: &terraform
  image: hashicorp/terraform:0.14.9

kind: pipeline
type: docker
name: validate
image_pull_secrets:
  - dockerconfig
steps:
  - name: check node modules
    <<: *nodejs
    commands:
      - cd app
      - npm audit --audit-level="high"
      - npm audit --production

  - name: install node modules
    <<: *nodejs
    commands:
      - cd app
      - npm ci

  - name: lint javascript
    <<: *nodejs
    commands:
      - cd app
      - npm run linter
    depends_on:
      - install node modules

  - name: validate terraform
    <<: *terraform
    commands:
      - cd infrastructure
      - terraform init -backend=false
      - terraform validate

  - name: check terraform formatting
    <<: *terraform
    commands:
      - cd infrastructure
      - terraform fmt -check -recursive

---
.alpine: &alpine
  image: alpine:latest

.nodejs: &nodejs
  image: node:14-alpine

.terraform: &terraform
  image: hashicorp/terraform:0.14.9

.package-variables: &package-variables
  environment:
    PACKAGE_NAME: "$DRONE_REPO_NAME-$DRONE_BUILD_NUMBER"

kind: pipeline
type: docker
name: build
image_pull_secrets:
  - dockerconfig
depends_on:
  - validate
steps:
  - name: install node modules
    <<: *nodejs
    commands:
      - cd app
      - npm ci

  - name: build app
    <<: *nodejs
    commands:
      - cd app
      - npm run build
    depends_on:
      - install node modules

  - name: terraform init
    <<: *terraform
    commands:
      - cd infrastructure
      - terraform init -backend=false

  - name: package deployment
    <<: *alpine
    <<: *package-variables
    commands:
      - mkdir -p package/app
      - cp -r infrastructure package/infrastructure
      - cp -r app/build package/app/build
      - tar -zcf "$PACKAGE_NAME" package
    depends_on:
      - build app
      - terraform init
